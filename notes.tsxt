- Criei o proeto com `npx create-next-app` e limpei os arquivos que eu não precisava;
- Adicionei internacionalização, utilizando next-intl. Já utilizei no meu website, e funciona super bem;
- Criei components de listagem de camisas e comecei a estilizar
- Continuei o desenvolvimento de cima pra baixo



[] -> responsividade;
[] -> Tradução para ingles;
[] -> tela de detalhes;
[] -> Funcionalidade de trocar a linguagem;
[] -> Filtros, pesquisar e demais funcionalidades no world;

__________________________________________________________________________________





https://docs.google.com/document/d/1mmtG0q4rvnXDM1sg-MF8HcJsk2Om7mN-5t1MkoNoKww/edit

https://programathor.com.br/user/conversations/105545?user_email=gb.engcomp%40hotmail.com&amp;user_token=cVhNTzqxPppcf_tUs-Ej

https://app.pipefy.com/public/form/yMmxRAIM: {
  *Nos conte como é a sua rotina e o que gosta de fazer no seu tempo livre.: Como atualmente estou bem focado em aprender novas linguagens e tecnologias, minha rotina gira em torno de estudar. Passo a maior parte do meu tempo desenvolvendo novos projetos, enquanto cuido do meu linkedin e github.
No momento estou aperfeiçoando minhas habilidades com Python, C# e Java.

Porém, durante meu tempo livre, gosto de sair da frente do computador, e praticar alguma atividade física ao ar livre. Ou ir patinar e conhecer novos lugares, ou jogar hockey no gelo.




*Quais são seus objetivos de vida hoje? Como você define suas prioridades para alcançá-los?: Em relação a minha vida profissional, tenhos dois principais objetivos, me tornar sênior na minha linguagem principal (JavaScript) e desenvolver habilidades consistentes com outras linguagens (Python, C#, php e Java).

Para alcançar esses objetivos, eu levo com prioridade e seriedade meus estudos, estudando diariamente e tentando aprender pelo menos algo novo a cada dia, sempre tomando notas para fixar melhor. 




*Por que você saiu do seu último emprego?: O superior da empresa tinha claramente uma tratativa diferente para alguns funcionários, entregando vantagens para uns e ignorando outros. Como por exemplo meu caso, que tive que praticamente me humilhar para solicitar minhas férias, mesmo sendo um direito, após estar a quase 2 anos na empresa e ser um funcionário comprometido, que sempre fazia horas extra (sem receber), sempre que solicidato.

E eu nunca tinha a liberdade de implementar boas práticas nos projetos, pois os gerentes sempre pediam para fazer de qualquer jeito, sempre era escolhido a forma mais facil e rápida. Isso resultava em vários projetos sem nenhuma arquitetura e cheio de problemas para corrigir.




*Você já faz uso do ChatGPT ou do GitHub Copilot em suas atividades diárias? Se sim, por favor, descreva como você os integra em seu trabalho. Caso não utilize, explique o motivo.: Sim, utilizo ChatGPT. Em JavaScript as vezes eu opto em pesquisar algo como alguma função matemática, alguma manipulação complexa de array/objeto ou até mesmo algo regex. Apenas para garantir que será um código curto, e poupar esse tempo.





* FUNÇÃO da pergunta 1: 
interface ICalculateDiscountProps {
  price: number;
  code: string;
}

const calculateDiscount = (data: ICalculateDiscountProps): 
  number => {
    const availableDiscountOptions = {
      DISC10: 0.9,
      DISC20: 0.8,
      DISC30: 0.7,
    };

    const discountPercentage = availableDiscountOptions[data.code] || 1;

    const finalPrice = data.price * discountPercentage;

    return finalPrice;
};

____________________________________________________________

Para melhorar o codigo, primeiro eu tipei, para termos controle do tipo de dado entrando e saindo. Em seguida coloquei as opções de desconto disponíveis em um objeto, com seus respectivos valores. Depois, uso a informação do desconto informado como index do objeto de descontos disponíves. Se for um valor mapeado, ele salva na const, se não for, deixa como 1, ou seja, sem desconto. Depois so multiplicar com o valor, e exibir o preço final.







*[Back-end] Pergunta 2: A tabela de Clientes ficaria sem nenhuma alteração, apenas tomando cuidado as regras de negócio, como por exemplo email unico.

Porém a tabela de Pedidos. eu adionaria mais uma coluna, "Customer_id", para podermos relacionar com a tabela do cliente, assim, sabendo quem fez aquele pedido. 

Cada Cliente pode ter n Pedidos. Mas cada Pedido só pode ter 1 Cliente.









*[Back-end] Pergunta 3: 
import { FastifyInstance } from "fastify";
import { ZodTypeProvider } from "fastify-type-provider-zod";
import { z } from "zod";

export async function listarSalasDisponiveis(app: FastifyInstance) {
  app.withTypeProvider<ZodTypeProvider>().get(
    "/salas/disponiveis",
    {
      schema: {
        summary: "Listar todas as salas disponiveis",
        tags: ["salas"],
        body: z.object({
          "tipoSala": z.string().min(1).max(255).nullable(),
          "numeroPessoas": z.number().int().positive().max(100).nullable(),
          "dataInicio": z.date().nullable(),
          "dataTermino": z.date().nullable(),
        }),
        querystring: z.object({
          pageIndex: z.string().nullable().default('0').transform(Number)
        }),
        response: {
          200: z.object({
            salas: z.array(
              z.object({
                id: z.number().int(),
                nome: z.string(),
                // informações restastes das salas, definidas na regra de negocio
              })
            ),
          }),
        },
      },
    },
    async (request, reply) => {
      const {
        tipoSala,
        numeroPessoas,
        dataInicio,
        dataTermino,
      } = request.body

      const { pageIndex } = request.query;

      const salas = await prisma.salas.findMany({
        select: {
          id: true,
          nome: true,
        },
        where: {
          tipoSala,
          numeroPessoas: {
            gt: numeroPessoas
          },
          date: {
            lte: new Date(dataTermino),
            get: new Date(dataInicio),
          },
        },
        take: 10,
        skip: pageIndex * 10,
        orderBy: {
          createdAt: "desc",
        },
      });

      return reply.send(salas);
    }
  );
}


____________________________________________________________

Utilizei prisma para simular a coneção com o BD e zod para validação da tipagem. Com isso posso criar uma query passando as limitações enviadas no corpo da requisição.















*[Front-end] Pergunta 2:
Eu implementaria um formulário com os campos necessarios e importantes para exibir as informações do usuário. O input seria um component, o qual teria uma props de "Bloqueado". Ao abrir a pagina de perfil, o usuário conseguiria visualizar todas as suas informações, porém sem editar. Para editar, ele teria que clicar em um botão "Editar" no final da página. Isso mudaria um useState da pagina (camposBloqueados) para false, liberando assim o acesso para editar suas informações. Com isso ja resolveriamos o visualizar informações e o formulário para editar, em uma única página, utilizando os mesmos componentes.

Para a funcionalidade de historico, eu colocaria mais um botão no final da pagina de perfil (Histórico). Ao clicar nesse botão, o usuário seria navegado para uma outra pagina, com uma Flatlist, exibindo o historico e com uma seta para retornar a pagina de perfil.

Eu salvaria em um contexto apenas as informações do usuário, como nome, email e id, pois usaria isso em outros locais. Como na propria página de historico, e/ou algum header da aplicação que precisa exibir o nome do usuário logado. 
Me atentando é claro, para atualizar essas informações do usuário após o editar, tanto fazendo a chamada a API, quanto atualizando no context. 

As demais informações, como o histórico, não vejo necessidade em salvar no contexto, apenas fazendo a request e salvando local é o suficiente, já que são dados utilizados apenas na mesma página.













}
